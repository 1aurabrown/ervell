{
  "name": "arena-passport",
  "version": "0.1.4",
  "description": "Wires up the common auth handlers for Arena login using Artsy's [Ezel](ezeljs.com)-based apps using [passport](http://passportjs.org/). Forked from Artsy Passport",
  "keywords": [
    "artsy",
    "passport",
    "auth",
    "authentication"
  ],
  "engines": {
    "node": ">= 0.10.x"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "passport": "*",
    "passport-facebook": "*",
    "passport-twitter": "*",
    "passport-local": "*",
    "superagent": "*",
    "coffee-script": "*",
    "express": "3.4.7"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "sinon": "*",
    "jade": "*",
    "underscore": "*",
    "backbone": "*",
    "sharify": "*",
    "backbone-super-sync": "*",
    "browserify": "*",
    "coffeeify": "*",
    "artsy-xapp-middleware": "*",
    "zombie": "*",
    "rewire": "*"
  },
  "readme": "# Arena Passport\n\nWires up the common auth handlers for Arena front end using Artsy's [Ezel](http://ezeljs.com)-based apps using [passport](http://passportjs.org/). Used internally at Arena to DRY up authentication code.\n\nMost definitely forked (read copied wholesale, with tiny modifications) from Artsy's artsy-passport. Thank you Craig Spaeth.\n\n## Setup\n\n#### Make sure you first mount session, body parser.\n\n````coffeescript\napp.use express.bodyParser()\napp.use express.cookieParser('foobar')\napp.use express.cookieSession()\n````\n\n#### Then mount Arena Passport passing a big configuration hash.\n\n_Values indicate defaults._\n\n````coffeescript\napp.use arenaPassport\n  SECURE_ARENA_URL: # SSL Arena url e.g. https://api.are.na\n  APP_URL: # Url pointing back to your app e.g. http://master.are.na\n  loginPath: '/users/sign_in' # POST `email` and `password` to this path to login\n  signupPath: '/users/invitation/accept' # POST `email` and `password` to this path to signup\n  # The user data to cache in the session\n  CurrentUser: # Backbone Model class to serialize the user into e.g. `CurrentUser`\n````\n\nThe keys are cased so it's convenient to pass in a configuration hash. A minimal setup could look like this:\n\n````coffeescript\napp.use arenaPassport _.extend config,\n  CurrentUser: CurrentUser\n````\n\n**Note:** CurrentUser must be a Backbone model with typical `get` and `toJSON` methods.\n\n#### Create a login form pointing to your paths.\n\n````jade\nh1 Login\nform( action='/users/sign_in', method='POST' )\n  h3 Login via Email\n  input( name='name' )\n  input( name='email' )\n  input( name='password' )\n  button( type='submit' ) Signup\n````\n\n#### And maybe a signup form...\n\n````jade\nh1 Signup\nform( action='/users/invitation/accept', method='POST' )\n  h3 Signup via Email\n  input( name='name' )\n  input( name='email' )\n  input( name='password' )\n  button( type='submit' ) Signup\n````\n\n#### Handle login and signup callbacks.\n\n````coffeescript\n{ loginPath, signupPath, twitterCallbackPath,\n  twitterLastStepPath, facebookCallbackPath } = artsyPassport.options\n\napp.post loginPath, (req, res) ->\n  res.redirect '/'\napp.post signupPath, (req, res) ->\n  res.redirect '/personalize'\n````\n\n#### Access a logged in Arena user in a variety of ways...\n\nIn your server-side templates\n\n````jade\nh1 Hello #{user.get('username')}\n````\n\nIn your client-side code\n\n````coffeescript\nCurrentUser = require '../models/current_user.coffee'\nsd = require('sharify').data\n\nuser = new CurrentUser(sd.CURRENT_USER)\n````\n\nIn your routers\n\n````coffeescript\napp.get '/', (req, res) ->\n  res.send 'Hello ' + req.user.get('name')\n````\n\n_These forms of user will be null if they're not logged in._\n\n## Contributing\n\nFirst install node modules `npm install` then write a ./config.coffee that looks something like this:\n\n````coffeescript\nmodule.exports =\n  SECURE_ARENA_URL: 'https://staging.are.na'\n  APP_URL: 'http://localhost:4000'\n  # An Arena user that's linked to facebook and twitter\n  ARENA_EMAIL: 'cab@are.na'\n  ARENA_PASSWORD: '***'\n````\n\nThen you can check the example by running `make example` and opening [localhost:4000](http://localhost:4000). The tests are integration tests that use the example, so once you set this up run `make test` to run tests.\n",
  "readmeFilename": "README.md",
  "_id": "arena-passport@0.1.4",
  "dist": {
    "shasum": "ec80c8c6dd7c8b58a4bab12f3ade09d0d4b80218"
  },
  "_resolved": "git://github.com/arenahq/arena-passport.git#0cc407ede4faa3599680ba4775a4de3012fc247e",
  "_from": "arena-passport@git://github.com/arenahq/arena-passport.git"
}
